redux with action para llamar data de un api

---instalaciones previas
---create-react-app nombreApp
---cd nombreApp
---npm i react-redux
---npm i redux
---npm i react-thunk


paso 1(constantes- action types)
-definir las accion types y exsportarla (export default ADD_API_DATA = "ADD_API_DATA")

paso 2(action -action creators)
-importar el accion type
- crear y exportar los action creators --> funciones planas que retornan redux action(objetos planoss)  -- aveces ponen(payload) como para parametros, al hacer llamandas al api el payload es el json que retornara con el action type y no va como parametro

-IMPORTANTE: 
- LOS ACTION SON EL MEJOR LUGAR PARA LLMARA DATA PERO  llamadas a apis en action creator con una funcion nhormal no funcionan,
Redux is expecting objects as actions but we’re trying to return a Promise, para eso se uisa react thunk que hace posible retornar funciones de accion creatror y no solo objetos, inside that function we can call APIs, delay the dispatch of an action, and so on.

-export actionCreatorName() { ... }--> el nombre casi siempre se parece a la action pero en camelcase

-ejemplo de loq ue dbe retornar un action creator simple (payload como parametro):

return {
	type: XXXXX,
	payload
}

-ejemplo de loq ue dbe retornar un action creator que llama data externa de un api con react thunk (sin parametro):

 return function(dispatch) {
    return fetch("https://jsonplaceholder.typicode.com/posts")
      .then(response => response.json())
      .then(json => {
        dispatch({ type: DATA_LOADED, payload: json });
        console.log('hoa')
      });

paso3(store - react-thunk)
- al usar react thunk en los action se debe agregar en el store como parametro la palbra thunk(thunk es un middleware)
-importar lo necesario 
 	import thunk from "redux-thunk"; 
 	import { createStore,  applyMiddleware, compose } from "redux";
-aumentar la propiedad en la creacion del store
 	const store =  createStore(rootReducer,storeEnhancers(applyMiddleware(thunk))




Paso 4(reducers)
-importar solo los accion type(no los action creators)
-crear el estado initial como un objeto y crear una key donde se almacenaran los datos

const initialState = {
	data: []
}

-crear la funcion pura(normarlmente llamada rootReducer) con el estado initial y el action comp parametros (state=initialState, action) que tendra que idetificara el action type y ejecutara un bloque de codigo(el estado inmutable, crea un nuevo estado o algo asi?) (al final fuera de los bloques retorna un stado --> return state)

-dentro de la funcion bloque if
(Object.assign --> copiar los valores de todas la propiedades enumerables de uno o más objetos fuente a un objeto destino. Retorna el objeto destino)

	if(action.type === XXXX) {
		 return Object.assign(
      		{},
       		state, 
      		{ data: state.data.concat(action.payload)}
           );
	}

- explicaion { data: state.data.concat(action.payload)}- la propiedad data del store (data:) sera reemplazada por los habia en la propieda data(state.data) y concatenado con que redcibe de la accion(concat(action.payload)) --> esta accion sería en action creator que se uso con reduc thunk

-retornar el reducer (rootReducer)


Paso 5(store)
- importar los elemento de redux que se utilizararn por ahora (createStore)
- importar el reducer
- crear el store con el reducer como parametro (El store contiene todo el árbol de estado de tu aplicación)
 const store =  createStore(rootReducer)
-exportar el store (export default store)


paso 6(componente)
-importar el conect de react-redux para conectar el copnente con redux y el action creator
-crear el componente como clase

xxxx
- en el ciclo componentDidiMount llamar a la funcoin que trae la data(que es el action creator con react thunk, que a su vez froma parte del store) que se "despacha" como prop del componente y que se puedes usar gracias que el compnente se conectara al store con connect que a su vez toda la aplicacion puede accder gracias al provider que rodea laetiqueta padre <App/>
xxxx

- en el ciclo componentDidMount obtener el actioncreator que se desea uasr ,y ejecutarlo 
this.props.getData() --> la accion se realizo y la data nueva ya esta en el store, la propiedad del store usada por el action creator fue actualizada por este


- fuera del componentes la funcion mapStateToProps con el state como parametro  se crea para proporcionar los datos del store al componente (funcion mapStateToPros(state) -->indiqua cómo transformar el estado actual del store Redux en los props que desea pasar a un componente de presentación ( para proporcionar los datos del store al componente))

function mapStateToProps(state) {
    return {
        articles: state.remoteArticles.slice(0, 10)
    };
}


- al tener la data ya cambiada por el aaction creator que se ejecuto en el componentedidmount y los datos proporcionados por la funcion mapStateToProps ya se puede ye puese obtener la data en el componente com si fuera un prop
ejm:
  {this.props.articles.map(el => (
                    <li className="list-group-item" key={el.id}>
                        {el.title}
                    </li>
                ))}



- con las funciones ya creadas, se conecta y exporta el componente a redux con connect para que todo funcione

ejm: export default connect(mapStateToProps,{ getData })(Post);

-getData --> action creator que se usa para ejecutar la accion para cambiar data en el store 
-Post --> el componente que se va a conectar
-mapStateToProps --> funcion que proporciona la data del store al componente como prop





